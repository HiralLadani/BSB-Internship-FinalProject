type Course = record {
  id : text;
  professor_id : principal;
  status : CourseStatus;
  title : text;
  description : text;
  voters : vec record { principal; bool };
  created_at : nat64;
  enrolled_students : vec record { principal; bool };
  vote_count : nat64;
};
type CourseStatus = variant {
  Approved;
  Draft;
  Rejected;
  Proposed;
  Voting;
  Archived;
};
type Result = variant { Ok : Course; Err : text };
type Role = variant { Guest; Student; Developer; Professor; Admin };
type UserProfile = record {
  profile_id : principal;
  name       : text;
  bio        : opt text;
  contact_email : opt text;
  github_username : opt text;
};

service : () -> {
  approve_course : (text) -> (Result);
  assign_role : (principal, Role) -> ();
  create_course : (text, text) -> (Result);
  create_or_update_my_profile : (UserProfile) -> ();
  enroll_in_course : (text) -> (Result);
  get_course_details : (text) -> (opt Course) query;
  get_deployer_principal : () -> (opt principal) query;
  get_my_enrolled_courses : () -> (vec Course) query;
  get_my_profile : () -> (opt UserProfile) query;
  get_user_profile : (principal) -> (opt UserProfile) query;
  list_courses : (opt CourseStatus) -> (vec Course) query;
  list_principals : () -> (vec principal) query;
  list_users : () -> (vec record { principal; Role }) query;
  login_as_role : (Role) -> (Role);
  my_role : () -> (Role) query;
  propose_course : (text) -> (Result);
  reject_course : (text) -> (Result);
  require_registered_user : () -> () query;
  vote_for_course : (text) -> (Result);
  whoami : () -> (principal) query;
}
